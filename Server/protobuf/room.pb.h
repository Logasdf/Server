// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room.proto

#ifndef PROTOBUF_INCLUDED_room_2eproto
#define PROTOBUF_INCLUDED_room_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_room_2eproto 

namespace protobuf_room_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_room_2eproto
namespace packet {
class Client;
class ClientDefaultTypeInternal;
extern ClientDefaultTypeInternal _Client_default_instance_;
class Room;
class RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class RoomList;
class RoomListDefaultTypeInternal;
extern RoomListDefaultTypeInternal _RoomList_default_instance_;
}  // namespace packet
namespace google {
namespace protobuf {
template<> ::packet::Client* Arena::CreateMaybeMessage<::packet::Client>(Arena*);
template<> ::packet::Room* Arena::CreateMaybeMessage<::packet::Room>(Arena*);
template<> ::packet::RoomList* Arena::CreateMaybeMessage<::packet::RoomList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace packet {

// ===================================================================

class Client : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:packet.Client) */ {
 public:
  Client();
  virtual ~Client();

  Client(const Client& from);

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Client(Client&& from) noexcept
    : Client() {
    *this = ::std::move(from);
  }

  inline Client& operator=(Client&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Client& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Client* internal_default_instance() {
    return reinterpret_cast<const Client*>(
               &_Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Client* other);
  friend void swap(Client& a, Client& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Client* New() const final {
    return CreateMaybeMessage<Client>(NULL);
  }

  Client* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Client>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Client& from);
  void MergeFrom(const Client& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:packet.Client)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_room_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Room : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:packet.Room) */ {
 public:
  Room();
  virtual ~Room();

  Room(const Room& from);

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(Room&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Room& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Room* other);
  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Room* New() const final {
    return CreateMaybeMessage<Room>(NULL);
  }

  Room* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Room>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Room& from);
  void MergeFrom(const Room& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Room* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .packet.Client clients = 4;
  int clients_size() const;
  void clear_clients();
  static const int kClientsFieldNumber = 4;
  ::packet::Client* mutable_clients(int index);
  ::google::protobuf::RepeatedPtrField< ::packet::Client >*
      mutable_clients();
  const ::packet::Client& clients(int index) const;
  ::packet::Client* add_clients();
  const ::google::protobuf::RepeatedPtrField< ::packet::Client >&
      clients() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Timestamp last_updated = 5;
  bool has_last_updated() const;
  void clear_last_updated();
  static const int kLastUpdatedFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_last_updated() const;
  public:
  const ::google::protobuf::Timestamp& last_updated() const;
  ::google::protobuf::Timestamp* release_last_updated();
  ::google::protobuf::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(::google::protobuf::Timestamp* last_updated);

  // int32 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // int32 current = 3;
  void clear_current();
  static const int kCurrentFieldNumber = 3;
  ::google::protobuf::int32 current() const;
  void set_current(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:packet.Room)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::packet::Client > clients_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* last_updated_;
  ::google::protobuf::int32 limit_;
  ::google::protobuf::int32 current_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_room_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoomList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:packet.RoomList) */ {
 public:
  RoomList();
  virtual ~RoomList();

  RoomList(const RoomList& from);

  inline RoomList& operator=(const RoomList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomList(RoomList&& from) noexcept
    : RoomList() {
    *this = ::std::move(from);
  }

  inline RoomList& operator=(RoomList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomList* internal_default_instance() {
    return reinterpret_cast<const RoomList*>(
               &_RoomList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RoomList* other);
  friend void swap(RoomList& a, RoomList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomList* New() const final {
    return CreateMaybeMessage<RoomList>(NULL);
  }

  RoomList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoomList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoomList& from);
  void MergeFrom(const RoomList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .packet.Room rooms = 1;
  int rooms_size() const;
  void clear_rooms();
  static const int kRoomsFieldNumber = 1;
  ::packet::Room* mutable_rooms(int index);
  ::google::protobuf::RepeatedPtrField< ::packet::Room >*
      mutable_rooms();
  const ::packet::Room& rooms(int index) const;
  ::packet::Room* add_rooms();
  const ::google::protobuf::RepeatedPtrField< ::packet::Room >&
      rooms() const;

  // @@protoc_insertion_point(class_scope:packet.RoomList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::packet::Room > rooms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_room_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Client

// string ip = 1;
inline void Client::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Client::ip() const {
  // @@protoc_insertion_point(field_get:packet.Client.ip)
  return ip_.GetNoArena();
}
inline void Client::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.Client.ip)
}
#if LANG_CXX11
inline void Client::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet.Client.ip)
}
#endif
inline void Client::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.Client.ip)
}
inline void Client::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.Client.ip)
}
inline ::std::string* Client::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:packet.Client.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Client::release_ip() {
  // @@protoc_insertion_point(field_release:packet.Client.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:packet.Client.ip)
}

// int32 port = 2;
inline void Client::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 Client::port() const {
  // @@protoc_insertion_point(field_get:packet.Client.port)
  return port_;
}
inline void Client::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:packet.Client.port)
}

// -------------------------------------------------------------------

// Room

// string name = 1;
inline void Room::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Room::name() const {
  // @@protoc_insertion_point(field_get:packet.Room.name)
  return name_.GetNoArena();
}
inline void Room::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.Room.name)
}
#if LANG_CXX11
inline void Room::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet.Room.name)
}
#endif
inline void Room::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.Room.name)
}
inline void Room::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.Room.name)
}
inline ::std::string* Room::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:packet.Room.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room::release_name() {
  // @@protoc_insertion_point(field_release:packet.Room.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:packet.Room.name)
}

// int32 limit = 2;
inline void Room::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 Room::limit() const {
  // @@protoc_insertion_point(field_get:packet.Room.limit)
  return limit_;
}
inline void Room::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:packet.Room.limit)
}

// int32 current = 3;
inline void Room::clear_current() {
  current_ = 0;
}
inline ::google::protobuf::int32 Room::current() const {
  // @@protoc_insertion_point(field_get:packet.Room.current)
  return current_;
}
inline void Room::set_current(::google::protobuf::int32 value) {
  
  current_ = value;
  // @@protoc_insertion_point(field_set:packet.Room.current)
}

// repeated .packet.Client clients = 4;
inline int Room::clients_size() const {
  return clients_.size();
}
inline void Room::clear_clients() {
  clients_.Clear();
}
inline ::packet::Client* Room::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:packet.Room.clients)
  return clients_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::packet::Client >*
Room::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:packet.Room.clients)
  return &clients_;
}
inline const ::packet::Client& Room::clients(int index) const {
  // @@protoc_insertion_point(field_get:packet.Room.clients)
  return clients_.Get(index);
}
inline ::packet::Client* Room::add_clients() {
  // @@protoc_insertion_point(field_add:packet.Room.clients)
  return clients_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::packet::Client >&
Room::clients() const {
  // @@protoc_insertion_point(field_list:packet.Room.clients)
  return clients_;
}

// .google.protobuf.Timestamp last_updated = 5;
inline bool Room::has_last_updated() const {
  return this != internal_default_instance() && last_updated_ != NULL;
}
inline const ::google::protobuf::Timestamp& Room::_internal_last_updated() const {
  return *last_updated_;
}
inline const ::google::protobuf::Timestamp& Room::last_updated() const {
  const ::google::protobuf::Timestamp* p = last_updated_;
  // @@protoc_insertion_point(field_get:packet.Room.last_updated)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Room::release_last_updated() {
  // @@protoc_insertion_point(field_release:packet.Room.last_updated)
  
  ::google::protobuf::Timestamp* temp = last_updated_;
  last_updated_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Room::mutable_last_updated() {
  
  if (last_updated_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    last_updated_ = p;
  }
  // @@protoc_insertion_point(field_mutable:packet.Room.last_updated)
  return last_updated_;
}
inline void Room::set_allocated_last_updated(::google::protobuf::Timestamp* last_updated) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_updated_);
  }
  if (last_updated) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(last_updated)->GetArena();
    if (message_arena != submessage_arena) {
      last_updated = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:packet.Room.last_updated)
}

// -------------------------------------------------------------------

// RoomList

// repeated .packet.Room rooms = 1;
inline int RoomList::rooms_size() const {
  return rooms_.size();
}
inline void RoomList::clear_rooms() {
  rooms_.Clear();
}
inline ::packet::Room* RoomList::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:packet.RoomList.rooms)
  return rooms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::packet::Room >*
RoomList::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:packet.RoomList.rooms)
  return &rooms_;
}
inline const ::packet::Room& RoomList::rooms(int index) const {
  // @@protoc_insertion_point(field_get:packet.RoomList.rooms)
  return rooms_.Get(index);
}
inline ::packet::Room* RoomList::add_rooms() {
  // @@protoc_insertion_point(field_add:packet.RoomList.rooms)
  return rooms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::packet::Room >&
RoomList::rooms() const {
  // @@protoc_insertion_point(field_list:packet.RoomList.rooms)
  return rooms_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace packet

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_room_2eproto
